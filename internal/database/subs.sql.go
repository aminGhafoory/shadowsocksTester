// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: subs.sql

package database

import (
	"context"
	"time"
)

const addToSubs = `-- name: AddToSubs :one
INSERT INTO subs(
    created_at,
    updated_at,
    url
)
VALUES(
    $1,$2,$3
)
RETURNING id, created_at, updated_at, url
`

type AddToSubsParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	Url       string
}

func (q *Queries) AddToSubs(ctx context.Context, arg AddToSubsParams) (Sub, error) {
	row := q.db.QueryRowContext(ctx, addToSubs, arg.CreatedAt, arg.UpdatedAt, arg.Url)
	var i Sub
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
	)
	return i, err
}

const getAllSubs = `-- name: GetAllSubs :many
SELECT id, created_at, updated_at, url FROM subs
ORDER BY created_at DESC
`

func (q *Queries) GetAllSubs(ctx context.Context) ([]Sub, error) {
	rows, err := q.db.QueryContext(ctx, getAllSubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sub
	for rows.Next() {
		var i Sub
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextSubsToFetch = `-- name: GetNextSubsToFetch :many
SELECT id, created_at, updated_at, url FROM subs 
ORDER BY updated_at ASC 
LIMIT $1
`

func (q *Queries) GetNextSubsToFetch(ctx context.Context, limit int32) ([]Sub, error) {
	rows, err := q.db.QueryContext(ctx, getNextSubsToFetch, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sub
	for rows.Next() {
		var i Sub
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
